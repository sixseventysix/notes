#+TITLE: LDREX and STREX
#arm #comparch

* introduction
before ARMv6, mutexes (binary semaphores) used the ~SWP~ instruction which blocked the system bus for the entire transaction (read from memory followed by a write to memory) even if another bus master wants to use it for a completely unrelated memory access.
~ARMv6+~ uses exclusive loads and stores which is a non blocking method to manage shared access.
bus masters wont be locked out from the memory access unless they are accessing the same location for which the transaction is taking place.

* e.g.
#+BEGIN_SRC asm
LOCKED EQU 0           ; define value indicating

 LDR     r12, <addr>   ; preload semaphore address
 LDR     r1, =LOCKED   ; preload "locked" value

spin_lock:
 LDREX   r0, [r12]     ; load semaphore value
 CMP     r0, #LOCKED   ; if semaphore was locked already
 STREXNE r0, r1, [r12] ;    try to claim
 CMPNE   r0, #1        ;    and check success
 BEQ     spin_lock     ; retry if claiming semaphore failed.
#+END_SRC

the combination of ~ldrex~ and ~strex~ is a safe way to acquire the lock, ensuring only one core can proceed to access/modify some shared resource
the actual work on the shared memory is done after the spinlock
in this code we are:
1. trying to access the lock using ~ldrex-strex~. if another core beats us then we retry
2. once we get the lock, we do work on the critical section
3. then we release the lock

#+BEGIN_SRC asm
spin_lock:
 LDREX   r0, [r12]         ; load current value of the semaphore into r0
 CMP     r0, #LOCKED       ; is it already locked? (i.e., is r0 == 0?)

 STREXNE r0, r1, [r12]     ; if it’s NOT locked (CMP was NE), try to lock it (write 0)
                           ; r1 contains value 0 (LOCKED)
                           ; STREXNE sets r0 = 0 (success) or r0 = 1 (failed)
    
 CMPNE   r0, #1            ; Only runs if STREXNE ran — compare result to see if store failed

 BEQ     spin_lock         ; If store failed (r0 == 1), try again

; --- critical section begins ---
; now safely access/modify the shared resource
; only one core can be here at a time
; --- critical section ends ---

MOV r1, #1                ; value meaning "unlocked"
STR r1, [r12]             ; release the lock
#+END_SRC

* example when ~[r12]~ is "locked":
#+BEGIN_SRC asm
 CMP     r0, #LOCKED      ; sets flags (Z=1 if r0 == LOCKED)
 STREXNE r0, r1, [r12]    ; only runs if Z == 0 (r0 != LOCKED)
 CMPNE   r0, #1           ; only runs if Z == 0
 BEQ     spin_lock        ; runs if Z == 1 (from most recent CMP)
#+END_SRC

where ~Z~ is the Zero flag

* shared TLB attribute for physical addresses:
a flag for physical addresses that allow multiple processors to share the same memory region, and see each others memory accesses

* LDREX (load register exclusive):
loads a word from memory and tags the physical address as exlusive access for the current processor (if the physical address has a shared TLB attribute)
if it doesnt have shared TLB attribute, it tags that the processor has an outstanding tagged physical address
** syntax:
#+BEGIN_SRC asm
LDREX rX, [rY]            ; load from address stored in rY into rX and mark it for exclusive access
#+END_SRC

* STREX (store register exlusive):
conditional store to memory
** cases:
1. physical address does not have shared TLB attr and has an outstanding tagged physical address:
store takes place and tag is cleared
2. physical address does not have shared TLB attr and has no outstanding tagged physical address:
store does not take place
3. physical address does have a shared TLB attr and physical address is tagged as exclusive for the processor:
store takes place and tag is cleared
4. physical address does have ashared TLB attr and physical address is not tagged as exclusive for the processor:
store does not take place

** syntax:
#+BEGIN_SRC asm
STREX rX, rY, [rZ]        ; try to store rY into address stored in rZ. rX will get the result of the store (1 if store failed, 0 if store succeeded)
#+END_SRC

* notes:
for reasons of performance, keep the number of instructions between corresponding ~LDREX~ and ~STREX~ instruction to a minimum.
(this is why we only do locks via ~ldrex-strex~ and not actual manipulation of the critical section as that can be arbitrarily long)

the address used in an ~STREX~ instruction must be the same as the address in the most recently executed ~LDREX~ instruction. the result of executing an ~STREX~ instruction to a different address is unpredictable.
